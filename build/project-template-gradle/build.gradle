/*
*   Script builds apk in release or debug mode
*   To run: 
*           gradle buildapk -Prelease (release mode)
*           gradle buildapk (debug mode -> default)
*   Options:
*           -Prelease  //this flag will run build in release mode
*           -PksPath=[path_to_keystore_file]
*           -PksPassword=[password_for_keystore_file]
*           -Palias=[alias_to_use_from_keystore_file]
*           -Ppassword=[password_for_alias]
*
*           -PtargetSdk=[target_sdk] (default is 22)
*           -PbuildToolsVersion=[build_tools_version] (default is 22.0.1)
*           -PsupportVersion=[support_version] (default (22.2.0)
*           -PcompileSdk=[compile_sdk_version] (default 22)
*
*           -PrunSBGenerator //this flag will triger static binding generation
*/

buildscript {
	repositories {
		jcenter()
	}

	dependencies {
		classpath "com.android.tools.build:gradle:1.5.0"
	}
}

apply plugin: "com.android.application"

def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')
def metadataParams = new LinkedList <String> ()
def allJarPaths = new LinkedList <String> ()
def createPluginConfigFile = false
def configStage = "\n:config phase: "
def nodeModulesDir = "../../node_modules/"
def libDir = "../../lib/Android/"
def pluginNames = new ArrayList<String>()
def configDir = file(nodeModulesDir)

def compiteCompileSdkVersion () {
	if(project.hasProperty("compileSdk")) {
		return compileSdk
	}
	else {
		return 22
	}
}

def computeTargetSdkVersion() {
	if(project.hasProperty("targetSdk")) {
		return targetSdk
	}
	else {
		return 22
	}
}

def computeBuildToolsVersion() {
	if(project.hasProperty("buildToolsVersion")) {
		return buildToolsVersion
	}
	else {
		return "22.0.1"
	}
}

def renameResultApks (variant) {
	def name
	variant.outputs.each { output ->

		def apkDirectory = output.packageApplication.outputFile.parentFile
		def apkNamePrefix = rootProject.name + "-" + variant.buildType.name

		if (output.zipAlign) {
			name = apkNamePrefix + ".apk"
			output.outputFile = new File(apkDirectory, name);
		}

		name = apkNamePrefix + "-unaligned.apk"
		output.packageApplication.outputFile = new File(apkDirectory, name);
	}    
}


////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// CONFIGURATIONS ///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

android {
	compileSdkVersion compiteCompileSdkVersion()
	buildToolsVersion computeBuildToolsVersion()
	
	defaultConfig {
		minSdkVersion 17
		targetSdkVersion computeTargetSdkVersion()
	}
	
	sourceSets.main {
		jniLibs.srcDir "libs/jni"
	}
	
	signingConfigs {
		release {
			if(project.hasProperty("release")) {
				if(project.hasProperty("ksPath") &&
					project.hasProperty("ksPassword") &&
					project.hasProperty("alias") &&
					project.hasProperty("password"))
				{
					storeFile file(ksPath)
					storePassword ksPassword
					keyAlias alias
					keyPassword password
				}
			}
		}
	}
	buildTypes {
		release {
			signingConfig signingConfigs.release
		}
	}
	
	applicationVariants.all { variant ->
		renameResultApks(variant)
	
		def mergeAssetsTask = variant.mergeAssets
		if(project.hasProperty("runSBGenerator")) {
			runBindingGenerator.dependsOn(copyMetadata)
			rbg.dependsOn(runBindingGenerator)
			mergeAssetsTask.dependsOn(rbg)
		}
		else {
			mergeAssetsTask.dependsOn(copyMetadata)
		}
	}
}

repositories {
	jcenter()
	// used for local *.AAR files
	flatDir {
		dirs 'libs/aar'
	}
}

dependencies {
	def suppotVer = "22.2.0";
	if(project.hasProperty("supportVersion")) {
		suppotVer = supportVersion
	}
	
	compile "com.android.support:support-v4:$suppotVer"
	compile "com.android.support:appcompat-v7:$suppotVer"

	// take all jars within the libs dir
	compile fileTree(dir: "libs", include: ["**/*.jar"])

	// take all jars within the node_modules dir
	compile fileTree(dir: nodeModulesDir, include: ["**/platforms/android/**/*.jar"], exclude: '**/.bin/**')

	// take all jars within the lib/Android dir
	compile fileTree(dir: libDir, include: ["**/*.jar"])
	
	//when gradle has aar support this will be preferred instead of addAarDependencies
	// compile files("$rootDir/libs/aar") {
		// builtBy 'copyAarDependencies'
	// }

}


////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// CONFIGURATION PHASE //////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

task pluginExtend {
	description "applies additional configuration"

	def pathToAppGradle = "../../app/App_Resources/Android/app.gradle" 
	def appGradle = file(pathToAppGradle)
	if(appGradle.exists()) {
		apply from: pathToAppGradle
	}
	
	def ft = fileTree(dir: nodeModulesDir, include: ["**/platforms/android/**/include.gradle"])
	ft.each { File igFile ->
		println igFile
		apply from: igFile
	}
}

//// doesn't work unless task is explicitly called (TODO: research configurations hook)
// addAarDependencies.dependsOn(copyAarDependencies)
// createDefaultIncludeFiles.dependsOn(addAarDependencies)
// createPluginsConfigFile.dependsOn(createDefaultIncludeFiles)
// pluginExtend.dependsOn(createPluginsConfigFile)

////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// BEFORE EXECUTION /////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

// we need to copy all dependencies into a flat dir, as pointed by the repositories configurations at the top
task copyAarDependencies (type: Copy) {
	println "$configStage copyAarDependencies"
	from fileTree(dir: nodeModulesDir, include: ["**/*.aar"], exclude: '**/.bin/**').files
	into "libs/aar"
}

task addAarDependencies <<  {
	println "$configStage addAarDependencies"
	// manually traverse all the locally copied AAR files and add them to the project compilation dependencies list
	FileTree tree = fileTree(dir: "libs/aar", include: ["**/*.aar"])
	tree.each { File file ->
		// remove the extension of the file (.aar)
		def length = file.name.length() - 4
		def fileName = file.name[0..<length]
		println "\t+adding dependency: " + file.getAbsolutePath()
		project.dependencies.add("compile", [name: fileName, ext: "aar"])
	}
}


////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// EXECUTUION PHASE /////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

task cleanLocalAarFiles(type: Delete) {
	delete fileTree(dir: "libs/aar", include: ["*.aar"])
}

task deleteJavaDir (type: Delete) {
	delete "$rootDir/src/main/java"
}

task ensureMetadataOutDir {
	def outputDir = file("$rootDir/metadata/output")
	outputDir.mkdirs()
}

task collectAllJars {
	description "gathers all paths to jar dependencies before building metadata with them"
	
	def explodedAarDir = project.buildDir.getAbsolutePath() + "/intermediates/exploded-aar/"
	def sdkPath = android.sdkDirectory.getAbsolutePath();
	def androidJar = sdkPath + "/platforms/" + android.compileSdkVersion + "/android.jar"
	
	doFirst {
		configurations.compile.each { File dependencyFile ->
			// println "\t+" + dependencyFile.getAbsolutePath()
			allJarPaths.add(dependencyFile.getAbsolutePath())
		}
		
		allJarPaths.add(androidJar);
		
		def ft = fileTree(dir: explodedAarDir, include: "**/*.jar")
		ft.each { currentJarFile ->
			allJarPaths.add(currentJarFile.getAbsolutePath())
		}
		
		metadataParams.add("metadata-generator.jar")
		metadataParams.add("../metadata/output")
		for(def i = 0; i < allJarPaths.size(); i++) {
			metadataParams.add(allJarPaths.get(i));
		}
	}
}

task isMetadataGenerationNecessary {
	description "checks if new metadata is necessary based on jar and aar dependencies used"
	def inputFile = new File("build/metadataUTD")
	def metadataDir = new File("metadata/output");
	
	inputs.file inputFile
	outputs.upToDateWhen {
		inputFile.exists() && 
		metadataDir.exists() &&
		metadataDir.list().length == 3 &&
		(inputFile.text.trim() == metadataParams.toString().trim())
	}
	
	doLast {
		inputFile.text = metadataParams
	}
}

task buildMetadata (type: JavaExec) {
	description "builds metadata with provided jar dependencies"
	outputs.upToDateWhen {
		!isMetadataGenerationNecessary.didWork
	}
	
	doFirst {
		workingDir "build-tools"

		main "-jar"

		args metadataParams.toArray()
	}
}

task copyMetadata(type: Copy) {
	description "moves metadata to the right place before packaging is done"
	outputs.upToDateWhen {
		!buildMetadata.didWork
	}

	from "metadata/output"
	into "src/main/assets/metadata"
}


task deleteExplodedAarFolder (type: Delete) {

	outputs.upToDateWhen {
		!isMetadataGenerationNecessary.didWork
	}
	
	def explodedAarDir = project.buildDir.getAbsolutePath() + "/intermediates/exploded-aar"
	delete explodedAarDir
}


////////////////////////////////////////////////////////////////////////////////////
////////////////////////////// OPTIONAL TASKS //////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
task runBindingGenerator(dependsOn: "ing:jar") {
	rootProject.jarsDir = allJarPaths
}
runBindingGenerator.dependsOn("bg:jar")

task rbg (dependsOn: "asbg:generatebindings")


////////////////////////////////////////////////////////////////////////////////////
////////////////////////////// EXECUTION ORDER /////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

// -- configuration phase
// 1. Copy *.aar dependencies
// 2. Add *.aar dependencies
// 3. create default include files
// 4. create plugins config file
// 5. plugin extend (apply from include files)

// --execution phase
deleteJavaDir.dependsOn(cleanLocalAarFiles)
ensureMetadataOutDir.dependsOn(deleteJavaDir)
collectAllJars.dependsOn(ensureMetadataOutDir)
isMetadataGenerationNecessary.dependsOn(collectAllJars)
buildMetadata.dependsOn(isMetadataGenerationNecessary)
copyMetadata.dependsOn(buildMetadata)

//DO NOT UNCOMMENT
// mergeAssets.dependsOn(copyMetadata) -> look in CONFIGURATIONS(top) in android.applicationVariants to see how it's done

task buildapk {
	// problem is compile dependencies need to be changed before configuration stage
	// and this is the only way so far
	tasks.copyAarDependencies.execute()
	tasks.addAarDependencies.execute()
	//done to build only necessary apk
	if(project.hasProperty("release")) {
		dependsOn assembleRelease
	}
	else {
		dependsOn assembleDebug
	}
	
	dependsOn deleteExplodedAarFolder
}
